## Development environment

The web app uses external dependencies and generated files that need to be installed/generated first.
To do this run the following commands from the repo root:

```sh
pnpm install && sg generate
```

After this we can start the development server for a great development experience. The development
server provides [hot module reloading](https://stackoverflow.com/questions/24581873/what-exactly-is-hot-module-replacement-in-webpack) for short feedback loops.

There are multiple ways to start the development server depending on your needs.

### Running a local SG instance

If you also plan to make backend changes then you'll have to run a Sourcegraph instance locally.

You can start a full Sourcegraph instance locally with `sg start`.

If you do not need access to every feature/service that Souregraph has to offer (e.g. precise code navigation)
then running `sg start minimal-sveltekit` will start a reduced instance that is faster to (re)start.

In both cases the web app can be accessed via https://sourcegraph.test:3443 in the browser.

### Proxying to a production instance

If you only need to make client side (frontend) changes then it's usually not necessary to start a local Sourcegraph
instance. Often it's even useful to be able to use S2 or dotcom as a backend, to get access to the very same data and
configuration.

For this we have two commands that need to be run in `client/web-sveltekit`:

```sh
cd client/web-sveltekit
pnpm dev
```

This starts the development server and proxies any API requests to https://sourcegraph.sourcegraph.com.

> [!NOTE]
> To make it easier to login you should add password authentication to your SAMS account.

Similarly the following command will proxy to https://sourcegraph.com:

```sh
cd client/web-svelkite
pnpm dev:dotcom
```

In both cases the web app can be accessed via https://localhost:5173

## Creating a new page

SvelteKit uses file based routing. This means the path of a file on the file system

## Writing tests

We use vitest for unit tests and playwright for integration tests. Both of these
are located next to the source files they test.
Vitest files end with `.test.ts` and Playwright files end with `.spec.ts`.

For example the Playwright test for testing `src/routes/search/+page.svelte`
is located at `src/routes/search/page.spec.ts`.

Locally you can run the tests with

```sh
pnpm vitest # Run vitest tests
pnpm test # Run playwright tests
```

You can also run playwright tests against a running vite dev server. This is
useful for debugging tests.

```sh
# In one terminal
pnpm dev
```

```sh
# In another terminal
pnpm test:dev
```

In CI, we run vitest and playwright via the `BUILD.bazel` file. You can run e2e tests locally with

```sh
sg bazel test //client/web-sveltekit:e2e_tests
```

### Updating Playwright

The Playwright version is defined in the `package.json` of this package. The browser versions are defined in `dev/tool_deps.bzl`.

You may have to find the right combination for both tools to work nicely with each other. The easiest is to start with updating
Playwright, pushing it to CI, and seeing what happens. We will first upgrade
Playwright and install the new browsers, and then update `dev/tool_deps.bzl` based on the newly installed browsers.

**1. Upgrade Playwright**

To [update Playwright](https://playwright.dev/docs/intro#updating-playwright), navigate to `clients/web-sveltekit` and
run `pnpm add @playwright/test@latest playwright@latest` followed by `pnpm exec playwright install --with-deps`.

**2. Update Bazel**

The `install` command from above may have downloaded new browsers. You may see a log message like (on macOS) `Chromium 128.0.6613.18 (playwright build v1129) downloaded to /Users/your-user/Library/Caches/ms-playwright/chromium-1129`.

If you don't have the logs anymore, you can run `pnpm exec playwright install --dry-run` to get an overview.

If your latest browser version is newer than what's listed in `dev/tool_deps.bzl`, you'll need to update `dev/tool_deps.bzl` to
include the new browser version and the zip file's sha integrity. You can calculate it yourself, e.g. using `openssl`:

```
openssl dgst -binary -sha256 <file> | openssl base64 -A
```

or run e.g. `bazel test //client/web-sveltekit:e2e_test` to see the new integrity sha. Example below:

```
Error in download_and_extract: java.io.IOException: Error downloading [https://playwright.azureedge.net/builds/chromium/1129/chromium-mac-arm64.zip] to /private/var/tmp/_bazel_michael/680fb57cd51801cfe03bf19f9d7a0d3e/external/chromium-darwin-arm64/temp15834460500730224298/chromium-mac-arm64.zip: Checksum was sha256-WdF50K2a15LlHbga7y17zBZOb130NMCBiI+760VovQ4= but wanted sha256-5wj+iZyUU7WSAyA8Unriu9swRag3JyAxUUgGgVM+fTw=
```

## Components

### Icons

We use [unplugin-icons](https://github.com/unplugin/unplugin-icons) together
with [unplugin-auto-import](https://github.com/unplugin/unplugin-auto-import)
to manage icons. This allows us to use icons from multiple icon sets without
having to import them manually.

For a list of currently available icon sets see the `@iconify-json/*` packages
in the `package.json` file.

Icon references have the form `I<IconSetName><IconName>`. For example the
[corner down left arrow from Lucide](https://lucide.dev/icons/corner-down-left)
can be referenced as `ILucideCornerDownLeft`.

The icon reference is then used in the `Icon` component. Note that the icon
doesn't have to be imported manually.

```svelte
<script lang="ts">
  import { Icon } from '$lib'
</script>

<Icon icon={ILucideCornerDownLeft} />
```

When the development server is running, the icon will be automatically added to
`auto-imports.d.ts` so TypeScript knows about it.

### Combobox

The Combobox component combines a text input with a dropdown selection menu, allowing users to either type to search or select from a list of options. It's useful for selecting from large lists of items where filtering is helpful.

```svelte
<script lang="ts">
  import { Combobox } from '$lib'
  
  const options = [
    { value: 'apple', label: 'Apple' },
    { value: 'banana', label: 'Banana' },
    { value: 'cherry', label: 'Cherry' }
  ];
</script>

<!-- Basic usage -->
<Combobox options={options} placeholder="Search fruits..." />

<!-- Multiple selection -->
<Combobox options={options} type="multiple" />

<!-- Custom styling -->
<Combobox 
  options={options} 
  width="400px"
/>
```

The Combobox supports both single and multiple selection modes and includes built-in search functionality. For detailed documentation and examples, visit the [Combobox component page](/components/combobox).

## Data fetching
### GraphQL

The web app makes use of query composition, i.e. components define their own
data dependencies via fragments, which get composed by their callers and are
eventually being used in a query in a loader.

The goal of this approach is to make data dependencies co-located and easier
to change, as well as to make the flow of data clearer. Data fetching should only
happen in data loaders, not components.

There are a couple of issues to consider with this approach and sometimes we'll
have to make exceptions:

- Caching: If every loader composes its own query it's possible that two
  queries fetch the same data, in which case we miss out on caching. If caching
  the data is more important than data co-location it might be preferable to
  define a reusable query function. Example: File list for currently opened
  folder (sidebar + folder page)
- Shared data from layout loaders: While it's very convenient that pages have
  access to any data from the ancestor layout loaders, that doesn't work well
  with data dependency co-location. The layout loaders don't know which
  sub-layout or sub-page is loaded and what data it needs.
  Fortunately we don't have a lot of data (yet) that is used this way. The
  prime example for this right now is information about the authenticated user.
  The current approach is to name data-dependencies on the current user as
  `<ComponentName>_AuthenticatedUser` and use that fragment in the
  `AuthenticatedUser` fragment in `src/routes/layout.gql`.
  This approach might change as we uncover more use cases.
- On demand data loading: Not all data is fetched/needed immediately for
  rendering page. Data for e.g. typeaheads is fetched on demand. Ideally the
  related queries are still composed by the data loader, which passes a
  function for fetching the data to the page.

## Rolling out pages to production

For a page to be accessible in production, the server needs to know to serve the
SvelteKit for that page. Due to file based routing we can easily determine available
pages during build time. The list of available pages is generated by the `sg generate`
command, which in turn runs `bazel run //client/web-sveltekit:write_generated`.

To enable a page in production by default, add the following comment to the `+page.svelte`
file:

```svelte
<script lang="ts">
  // @sg EnableRollout
  // ...
</script>
```

and run `sg generate` or `bazel run //client/web-sveltekit:write_generated` to update the
list of available pages.

It's common now to create new pages in the new web app only, in which case the `//@sg EnableAlways`
flag needs to be set.
